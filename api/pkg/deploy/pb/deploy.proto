syntax = "proto3";

package workflow.deploy;
option go_package = "github.com/infraboard/workflow/api/pkg/deploy";

import "github.com/infraboard/mcube/cmd/protoc-gen-go-ext/extension/tag/tag.proto";
import "github.com/infraboard/mcube/pb/page/page.proto";

service Service {
	rpc CreateApplicationDeploy(CreateApplicationDeployRequest) returns(ApplicationDeploy);
    rpc QueryApplicationDeploy(QueryApplicationDeployRequest) returns(ApplicationDeploySet);
}

// Mode 部署的形式
enum Mode {
    // 主机模式部署
    Host = 0;
	// k8s模式部署
	K8s = 1;
}

// 应用部署配置类型
enum AppConfigType {
    // 配置文件形式
    File = 0;
    // 环境变量
    EnvVar = 1;
    // ConfigMap k8s模式下才支持
    ConfigMap = 2;
}

// ApplicationDeploy 应用部署
message ApplicationDeploy {
    // 唯一ID
    string id = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"_id" json:"id"'}
        ];
    // 所属域
    string domain = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"domain" json:"domain"'}
    ];
    // 所属空间
    string namespace = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"namespace" json:"namespace"'}
    ];
    // 创建时间
    int64 create_at = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_at" json:"create_at"'}
    ];
    // 创建人
    string create_by = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_by" json:"create_by"'}
    ];
    // 创建时间
    int64 update_at = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"update_at" json:"update_at"'}
    ];
    // 创建人
    string update_by = 7[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"update_by" json:"update_by"'}
    ];
    // 关联的应用
    string app_id = 9[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"app_id" json:"app_id"'}
        ];
    // 所属环境
    string environment = 10[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"environment" json:"environment"'}
    ];
    // 部署的名称
    string name = 11[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name"'}
    ];
    // 应用配置
    ApplicationConfig application_conf = 12[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"application_conf" json:"application_conf"'}
    ];
    // 部署模式
    Mode deploy_mode = 13[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"deploy_mode" json:"deploy_mode"'}
    ];
    // 主机模式的部署配置
    HostModeConfig host_deploy_config = 14[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"host_deploy_config" json:"host_deploy_config"'}
    ];
    // k8s模式下的部署配置
    K8sModeConfig k8s_deploy_config = 15[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"k8s_deploy_config" json:"k8s_deploy_config"'}
    ];
	// 标签
	map<string, string> tags = 16[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"tags" json:"tags"'}
    ];
	// 描述
	string description = 17[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"description" json:"description"'}
	];
}

message HostModeConfig {
    // 关联的主机列表, 这里是关联id, 来源于cmdb系统
    repeated string hosts_ref = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"hosts_ref" json:"hosts_ref"'}
    ];
}

// ApplicationConfig 应用部署时的配置
message ApplicationConfig {
    // 配置方式
    AppConfigType type = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"type" json:"type"'}
    ];
    // 配置文件
    repeated FileConfig files = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"files" json:"files"'}
    ];
    // 环境变量
    map<string, string> envs = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"envs" json:"envs"'}
    ];
    // ConfigMap配置
    string config_map = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"config_map" json:"config_map"'}
    ];
}

// FileConfig 应用的配置文件
message FileConfig {
    // 配置文件描述
    string desc = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"desc" json:"desc"'}
    ];
    // 配置文件放置路径
    string path = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"path" json:"path"'}
    ];
    // 配置文件的内容
    string content = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"content" json:"content"'}
    ];
}

// K8sModeConfig yaml文本格式的k8s部署相关配置文件
message K8sModeConfig {
    // k8s 认证配置
    string kube_config = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"kube_config" json:"kube_config"'}
    ];
    // Deployment配置
    string deployment = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"deployment" json:"deployment"'}
    ];
    // Service配置
    string service =3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"service" json:"service"'}
    ];
}


// CreateApplicationDeployRequest 应用部署
message CreateApplicationDeployRequest {
    // 所属域
    string domain = 1[
        (google.protobuf.field_tag) = {struct_tag: 'json:"domain" validate:"required"'}
    ];
    // 所属空间
    string namespace = 2[
        (google.protobuf.field_tag) = {struct_tag: 'json:"namespace" validate:"required"'}
    ];
    // 关联的应用
    string app_id = 3[
        (google.protobuf.field_tag) = {struct_tag: 'json:"app_id" validate:"required"'}
        ];
    // 所属环境
    string environment = 4[
        (google.protobuf.field_tag) = {struct_tag: 'json:"environment" validate:"required"'}
    ];
    // 部署的名称
    string name = 5[
        (google.protobuf.field_tag) = {struct_tag: 'json:"name" validate:"required"'}
    ];
    // 应用配置
    ApplicationConfig application_conf = 6[
        (google.protobuf.field_tag) = {struct_tag: 'json:"application_conf"'}
    ];
    // 部署模式
    Mode deploy_mode = 7[
        (google.protobuf.field_tag) = {struct_tag: 'json:"deploy_mode"'}
    ];
    // 主机模式的部署配置
    HostModeConfig host_deploy_config = 8[
        (google.protobuf.field_tag) = {struct_tag: 'json:"host_deploy_config"'}
    ];
    // k8s模式下的部署配置
    K8sModeConfig k8s_deploy_config = 9[
        (google.protobuf.field_tag) = {struct_tag: 'json:"k8s_deploy_config"'}
    ];
	// 标签
	map<string, string> tags = 10[
        (google.protobuf.field_tag) = {struct_tag: 'json:"tags"'}
    ];
	// 描述
	string description = 11[
		(google.protobuf.field_tag) = {struct_tag: 'json:"description"'}
	];
}

// ApplicationDeploySet todo
message ApplicationDeploySet {
    int64 total = 1[
        (google.protobuf.field_tag) = {struct_tag: 'json:"total"'}
        ];
    repeated ApplicationDeploy items = 2[
        (google.protobuf.field_tag) = {struct_tag: 'json:"items"'}
        ];
}

message QueryApplicationDeployRequest {
    page.PageRequest page = 1;
    string namespace = 4;
    string app_id = 2;
    string environment = 3;    
}