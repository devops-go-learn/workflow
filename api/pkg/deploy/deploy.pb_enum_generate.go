// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package deploy

import (
	"bytes"
	"fmt"
	"strings"
)

// ParseModeFromString Parse Mode from string
func ParseModeFromString(str string) (Mode, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := Mode_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown Mode: %s", str)
	}

	return Mode(v), nil
}

// Equal type compare
func (t Mode) Equal(target Mode) bool {
	return t == target
}

// IsIn todo
func (t Mode) IsIn(targets ...Mode) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t Mode) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *Mode) UnmarshalJSON(b []byte) error {
	ins, err := ParseModeFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseAppConfigTypeFromString Parse AppConfigType from string
func ParseAppConfigTypeFromString(str string) (AppConfigType, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := AppConfigType_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown AppConfigType: %s", str)
	}

	return AppConfigType(v), nil
}

// Equal type compare
func (t AppConfigType) Equal(target AppConfigType) bool {
	return t == target
}

// IsIn todo
func (t AppConfigType) IsIn(targets ...AppConfigType) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t AppConfigType) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *AppConfigType) UnmarshalJSON(b []byte) error {
	ins, err := ParseAppConfigTypeFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
