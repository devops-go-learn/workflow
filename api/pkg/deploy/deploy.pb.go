//go:generate  mcube enum -m -p
//
// Code generated by protoc-gen-go-ext. DO NOT EDIT.
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: api/pkg/deploy/pb/deploy.proto

package deploy

import (
	_ "github.com/infraboard/mcube/cmd/protoc-gen-go-ext/extension/tag"
	page "github.com/infraboard/mcube/pb/page"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode 部署的形式
type Mode int32

const (
	// 主机模式部署
	Mode_Host Mode = 0
	// k8s模式部署
	Mode_K8s Mode = 1
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "Host",
		1: "K8s",
	}
	Mode_value = map[string]int32{
		"Host": 0,
		"K8s":  1,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pkg_deploy_pb_deploy_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_api_pkg_deploy_pb_deploy_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{0}
}

// 应用部署配置类型
type AppConfigType int32

const (
	// 配置文件形式
	AppConfigType_File AppConfigType = 0
	// 环境变量
	AppConfigType_EnvVar AppConfigType = 1
	// ConfigMap k8s模式下才支持
	AppConfigType_ConfigMap AppConfigType = 2
)

// Enum value maps for AppConfigType.
var (
	AppConfigType_name = map[int32]string{
		0: "File",
		1: "EnvVar",
		2: "ConfigMap",
	}
	AppConfigType_value = map[string]int32{
		"File":      0,
		"EnvVar":    1,
		"ConfigMap": 2,
	}
)

func (x AppConfigType) Enum() *AppConfigType {
	p := new(AppConfigType)
	*p = x
	return p
}

func (x AppConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_pkg_deploy_pb_deploy_proto_enumTypes[1].Descriptor()
}

func (AppConfigType) Type() protoreflect.EnumType {
	return &file_api_pkg_deploy_pb_deploy_proto_enumTypes[1]
}

func (x AppConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppConfigType.Descriptor instead.
func (AppConfigType) EnumDescriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{1}
}

// ApplicationDeploy 应用部署
type ApplicationDeploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"_id"`
	// 所属域
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain" bson:"domain"`
	// 所属空间
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace" bson:"namespace"`
	// 创建时间
	CreateAt int64 `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at" bson:"create_at"`
	// 创建人
	CreateBy string `protobuf:"bytes,5,opt,name=create_by,json=createBy,proto3" json:"create_by" bson:"create_by"`
	// 创建时间
	UpdateAt int64 `protobuf:"varint,6,opt,name=update_at,json=updateAt,proto3" json:"update_at" bson:"update_at"`
	// 创建人
	UpdateBy string `protobuf:"bytes,7,opt,name=update_by,json=updateBy,proto3" json:"update_by" bson:"update_by"`
	// 关联的应用
	AppId string `protobuf:"bytes,9,opt,name=app_id,json=appId,proto3" json:"app_id" bson:"app_id"`
	// 所属环境
	Environment string `protobuf:"bytes,10,opt,name=environment,proto3" json:"environment" bson:"environment"`
	// 部署的名称
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name" bson:"name"`
	// 应用配置
	ApplicationConf *ApplicationConfig `protobuf:"bytes,12,opt,name=application_conf,json=applicationConf,proto3" json:"application_conf" bson:"application_conf"`
	// 部署模式
	DeployMode Mode `protobuf:"varint,13,opt,name=deploy_mode,json=deployMode,proto3,enum=workflow.deploy.Mode" json:"deploy_mode" bson:"deploy_mode"`
	// 主机模式的部署配置
	HostDeployConfig *HostModeConfig `protobuf:"bytes,14,opt,name=host_deploy_config,json=hostDeployConfig,proto3" json:"host_deploy_config" bson:"host_deploy_config"`
	// k8s模式下的部署配置
	K8SDeployConfig *K8SModeConfig `protobuf:"bytes,15,opt,name=k8s_deploy_config,json=k8sDeployConfig,proto3" json:"k8s_deploy_config" bson:"k8s_deploy_config"`
	// 标签
	Tags map[string]string `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"tags"`
	// 描述
	Description string `protobuf:"bytes,17,opt,name=description,proto3" json:"description" bson:"description"`
}

func (x *ApplicationDeploy) Reset() {
	*x = ApplicationDeploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDeploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDeploy) ProtoMessage() {}

func (x *ApplicationDeploy) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDeploy.ProtoReflect.Descriptor instead.
func (*ApplicationDeploy) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{0}
}

func (x *ApplicationDeploy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApplicationDeploy) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ApplicationDeploy) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ApplicationDeploy) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *ApplicationDeploy) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *ApplicationDeploy) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *ApplicationDeploy) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *ApplicationDeploy) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ApplicationDeploy) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *ApplicationDeploy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationDeploy) GetApplicationConf() *ApplicationConfig {
	if x != nil {
		return x.ApplicationConf
	}
	return nil
}

func (x *ApplicationDeploy) GetDeployMode() Mode {
	if x != nil {
		return x.DeployMode
	}
	return Mode_Host
}

func (x *ApplicationDeploy) GetHostDeployConfig() *HostModeConfig {
	if x != nil {
		return x.HostDeployConfig
	}
	return nil
}

func (x *ApplicationDeploy) GetK8SDeployConfig() *K8SModeConfig {
	if x != nil {
		return x.K8SDeployConfig
	}
	return nil
}

func (x *ApplicationDeploy) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ApplicationDeploy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type HostModeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 关联的主机列表, 这里是关联id, 来源于cmdb系统
	HostsRef []string `protobuf:"bytes,1,rep,name=hosts_ref,json=hostsRef,proto3" json:"hosts_ref" bson:"hosts_ref"`
}

func (x *HostModeConfig) Reset() {
	*x = HostModeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostModeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostModeConfig) ProtoMessage() {}

func (x *HostModeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostModeConfig.ProtoReflect.Descriptor instead.
func (*HostModeConfig) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{1}
}

func (x *HostModeConfig) GetHostsRef() []string {
	if x != nil {
		return x.HostsRef
	}
	return nil
}

// ApplicationConfig 应用部署时的配置
type ApplicationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置方式
	Type AppConfigType `protobuf:"varint,1,opt,name=type,proto3,enum=workflow.deploy.AppConfigType" json:"type" bson:"type"`
	// 配置文件
	Files []*FileConfig `protobuf:"bytes,2,rep,name=files,proto3" json:"files" bson:"files"`
	// 环境变量
	Envs map[string]string `protobuf:"bytes,3,rep,name=envs,proto3" json:"envs" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"envs"`
	// ConfigMap配置
	ConfigMap string `protobuf:"bytes,4,opt,name=config_map,json=configMap,proto3" json:"config_map" bson:"config_map"`
}

func (x *ApplicationConfig) Reset() {
	*x = ApplicationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationConfig) ProtoMessage() {}

func (x *ApplicationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationConfig.ProtoReflect.Descriptor instead.
func (*ApplicationConfig) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationConfig) GetType() AppConfigType {
	if x != nil {
		return x.Type
	}
	return AppConfigType_File
}

func (x *ApplicationConfig) GetFiles() []*FileConfig {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ApplicationConfig) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *ApplicationConfig) GetConfigMap() string {
	if x != nil {
		return x.ConfigMap
	}
	return ""
}

// FileConfig 应用的配置文件
type FileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 配置文件描述
	Desc string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc" bson:"desc"`
	// 配置文件放置路径
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path" bson:"path"`
	// 配置文件的内容
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content" bson:"content"`
}

func (x *FileConfig) Reset() {
	*x = FileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileConfig) ProtoMessage() {}

func (x *FileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileConfig.ProtoReflect.Descriptor instead.
func (*FileConfig) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{3}
}

func (x *FileConfig) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *FileConfig) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileConfig) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// K8sModeConfig yaml文本格式的k8s部署相关配置文件
type K8SModeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// k8s 认证配置
	KubeConfig string `protobuf:"bytes,1,opt,name=kube_config,json=kubeConfig,proto3" json:"kube_config" bson:"kube_config"`
	// Deployment配置
	Deployment string `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment" bson:"deployment"`
	// Service配置
	Service string `protobuf:"bytes,3,opt,name=service,proto3" json:"service" bson:"service"`
}

func (x *K8SModeConfig) Reset() {
	*x = K8SModeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SModeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SModeConfig) ProtoMessage() {}

func (x *K8SModeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SModeConfig.ProtoReflect.Descriptor instead.
func (*K8SModeConfig) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{4}
}

func (x *K8SModeConfig) GetKubeConfig() string {
	if x != nil {
		return x.KubeConfig
	}
	return ""
}

func (x *K8SModeConfig) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *K8SModeConfig) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

// CreateApplicationDeployRequest 应用部署
type CreateApplicationDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 所属域
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain" validate:"required"`
	// 所属空间
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace" validate:"required"`
	// 关联的应用
	AppId string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id" validate:"required"`
	// 所属环境
	Environment string `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment" validate:"required"`
	// 部署的名称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" validate:"required"`
	// 应用配置
	ApplicationConf *ApplicationConfig `protobuf:"bytes,6,opt,name=application_conf,json=applicationConf,proto3" json:"application_conf"`
	// 部署模式
	DeployMode Mode `protobuf:"varint,7,opt,name=deploy_mode,json=deployMode,proto3,enum=workflow.deploy.Mode" json:"deploy_mode"`
	// 主机模式的部署配置
	HostDeployConfig *HostModeConfig `protobuf:"bytes,8,opt,name=host_deploy_config,json=hostDeployConfig,proto3" json:"host_deploy_config"`
	// k8s模式下的部署配置
	K8SDeployConfig *K8SModeConfig `protobuf:"bytes,9,opt,name=k8s_deploy_config,json=k8sDeployConfig,proto3" json:"k8s_deploy_config"`
	// 标签
	Tags map[string]string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 描述
	Description string `protobuf:"bytes,11,opt,name=description,proto3" json:"description"`
}

func (x *CreateApplicationDeployRequest) Reset() {
	*x = CreateApplicationDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApplicationDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApplicationDeployRequest) ProtoMessage() {}

func (x *CreateApplicationDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApplicationDeployRequest.ProtoReflect.Descriptor instead.
func (*CreateApplicationDeployRequest) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{5}
}

func (x *CreateApplicationDeployRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateApplicationDeployRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateApplicationDeployRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CreateApplicationDeployRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *CreateApplicationDeployRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateApplicationDeployRequest) GetApplicationConf() *ApplicationConfig {
	if x != nil {
		return x.ApplicationConf
	}
	return nil
}

func (x *CreateApplicationDeployRequest) GetDeployMode() Mode {
	if x != nil {
		return x.DeployMode
	}
	return Mode_Host
}

func (x *CreateApplicationDeployRequest) GetHostDeployConfig() *HostModeConfig {
	if x != nil {
		return x.HostDeployConfig
	}
	return nil
}

func (x *CreateApplicationDeployRequest) GetK8SDeployConfig() *K8SModeConfig {
	if x != nil {
		return x.K8SDeployConfig
	}
	return nil
}

func (x *CreateApplicationDeployRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateApplicationDeployRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ApplicationDeploySet todo
type ApplicationDeploySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Items []*ApplicationDeploy `protobuf:"bytes,2,rep,name=items,proto3" json:"items"`
}

func (x *ApplicationDeploySet) Reset() {
	*x = ApplicationDeploySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDeploySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDeploySet) ProtoMessage() {}

func (x *ApplicationDeploySet) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDeploySet.ProtoReflect.Descriptor instead.
func (*ApplicationDeploySet) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationDeploySet) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ApplicationDeploySet) GetItems() []*ApplicationDeploy {
	if x != nil {
		return x.Items
	}
	return nil
}

type QueryApplicationDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *page.PageRequest `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Namespace   string            `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	AppId       string            `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Environment string            `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *QueryApplicationDeployRequest) Reset() {
	*x = QueryApplicationDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryApplicationDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryApplicationDeployRequest) ProtoMessage() {}

func (x *QueryApplicationDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_pkg_deploy_pb_deploy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryApplicationDeployRequest.ProtoReflect.Descriptor instead.
func (*QueryApplicationDeployRequest) Descriptor() ([]byte, []int) {
	return file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP(), []int{7}
}

func (x *QueryApplicationDeployRequest) GetPage() *page.PageRequest {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *QueryApplicationDeployRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *QueryApplicationDeployRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *QueryApplicationDeployRequest) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

var File_api_pkg_deploy_pb_deploy_proto protoreflect.FileDescriptor

var file_api_pkg_deploy_pb_deploy_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2f, 0x70, 0x62, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2f, 0x63,
	0x6d, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f,
	0x2d, 0x65, 0x78, 0x74, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x74,
	0x61, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x2f, 0x6d, 0x63, 0x75, 0x62, 0x65, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x61, 0x67,
	0x65, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x0a, 0x0a,
	0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xc2, 0xde, 0x1f, 0x16, 0x0a, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x5f, 0x69, 0x64, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xc2, 0xde, 0x1f, 0x1d, 0x0a, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xc2, 0xde,
	0x1f, 0x23, 0x0a, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x27, 0xc2, 0xde, 0x1f, 0x23, 0x0a, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xc2, 0xde, 0x1f, 0x23, 0x0a,
	0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x22, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x27, 0xc2, 0xde, 0x1f, 0x23, 0x0a, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x22, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xc2, 0xde, 0x1f, 0x23, 0x0a, 0x21, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x22, 0x52, 0x08,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xc2, 0xde, 0x1f, 0x1d, 0x0a, 0x1b,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc2, 0xde, 0x1f, 0x27, 0x0a, 0x25, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xc2, 0xde, 0x1f, 0x19, 0x0a, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x35, 0xc2, 0xde, 0x1f, 0x31, 0x0a, 0x2f, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x22, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x63, 0x0a, 0x0b, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x2b, 0xc2, 0xde, 0x1f, 0x27, 0x0a, 0x25, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x88, 0x01, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x39,
	0xc2, 0xde, 0x1f, 0x35, 0x0a, 0x33, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x83, 0x01, 0x0a, 0x11,
	0x6b, 0x38, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4b, 0x38, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x37, 0xc2, 0xde, 0x1f, 0x33, 0x0a, 0x31, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x38,
	0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x52, 0x0f, 0x6b, 0x38, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x5f, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0xc2,
	0xde, 0x1f, 0x19, 0x0a, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x67, 0x73, 0x22,
	0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x67, 0x73, 0x22, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc2, 0xde, 0x1f, 0x27, 0x0a, 0x25, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x0e, 0x48, 0x6f,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x27, 0xc2, 0xde, 0x1f, 0x23, 0x0a, 0x21, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x73,
	0x74, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x22, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x66, 0x22, 0x9e, 0x03, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1d, 0xc2, 0xde, 0x1f, 0x19, 0x0a, 0x17, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1f, 0xc2, 0xde, 0x1f, 0x1b, 0x0a, 0x19, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0xc2, 0xde, 0x1f,
	0x19, 0x0a, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x76, 0x73, 0x22, 0x20, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65, 0x6e, 0x76, 0x73, 0x22, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xc2, 0xde, 0x1f, 0x25, 0x0a, 0x23, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x20, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e,
	0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xc2, 0xde, 0x1f, 0x19, 0x0a, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65,
	0x73, 0x63, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x73, 0x63, 0x22, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x31, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0xc2, 0xde, 0x1f, 0x19, 0x0a, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x70, 0x61, 0x74, 0x68, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc2, 0xde, 0x1f, 0x1f, 0x0a,
	0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x0d, 0x4b, 0x38, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0b, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0xc2, 0xde, 0x1f, 0x27, 0x0a, 0x25, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0a, 0x6b, 0x75, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xc2, 0xde, 0x1f,
	0x25, 0x0a, 0x23, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xc2, 0xde, 0x1f, 0x1f, 0x0a, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xe9, 0x07, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xc2, 0xde, 0x1f, 0x23, 0x0a, 0x21, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x48, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xc2, 0xde, 0x1f, 0x26, 0x0a, 0x24,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x27, 0xc2, 0xde, 0x1f, 0x23, 0x0a, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x4e, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xc2, 0xde, 0x1f, 0x28, 0x0a, 0x26, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xc2,
	0xde, 0x1f, 0x21, 0x0a, 0x1f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1d, 0xc2, 0xde, 0x1f, 0x19, 0x0a, 0x17,
	0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x22, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0xc2, 0xde, 0x1f, 0x14, 0x0a, 0x12, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x12, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1f, 0xc2, 0xde, 0x1f, 0x1b, 0x0a, 0x19, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x11, 0x6b, 0x38,
	0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4b, 0x38, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x1e, 0xc2, 0xde, 0x1f, 0x1a, 0x0a, 0x18, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x6b, 0x38, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0f, 0x6b, 0x38, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x11, 0xc2, 0xde, 0x1f, 0x0d, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x61, 0x67,
	0x73, 0x22, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xc2,
	0xde, 0x1f, 0x14, 0x0a, 0x12, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01,
	0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x53, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x12, 0xc2, 0xde, 0x1f, 0x0e, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x4c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x42, 0x12, 0xc2, 0xde, 0x1f, 0x0e, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9d,
	0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x19,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4b, 0x38, 0x73, 0x10, 0x01, 0x2a, 0x34, 0x0a, 0x0d, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x10, 0x02, 0x32,
	0xea, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2f, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x6f, 0x0a, 0x16, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x53, 0x65, 0x74, 0x42, 0x2f, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_pkg_deploy_pb_deploy_proto_rawDescOnce sync.Once
	file_api_pkg_deploy_pb_deploy_proto_rawDescData = file_api_pkg_deploy_pb_deploy_proto_rawDesc
)

func file_api_pkg_deploy_pb_deploy_proto_rawDescGZIP() []byte {
	file_api_pkg_deploy_pb_deploy_proto_rawDescOnce.Do(func() {
		file_api_pkg_deploy_pb_deploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_pkg_deploy_pb_deploy_proto_rawDescData)
	})
	return file_api_pkg_deploy_pb_deploy_proto_rawDescData
}

var file_api_pkg_deploy_pb_deploy_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_pkg_deploy_pb_deploy_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_pkg_deploy_pb_deploy_proto_goTypes = []interface{}{
	(Mode)(0),                              // 0: workflow.deploy.Mode
	(AppConfigType)(0),                     // 1: workflow.deploy.AppConfigType
	(*ApplicationDeploy)(nil),              // 2: workflow.deploy.ApplicationDeploy
	(*HostModeConfig)(nil),                 // 3: workflow.deploy.HostModeConfig
	(*ApplicationConfig)(nil),              // 4: workflow.deploy.ApplicationConfig
	(*FileConfig)(nil),                     // 5: workflow.deploy.FileConfig
	(*K8SModeConfig)(nil),                  // 6: workflow.deploy.K8sModeConfig
	(*CreateApplicationDeployRequest)(nil), // 7: workflow.deploy.CreateApplicationDeployRequest
	(*ApplicationDeploySet)(nil),           // 8: workflow.deploy.ApplicationDeploySet
	(*QueryApplicationDeployRequest)(nil),  // 9: workflow.deploy.QueryApplicationDeployRequest
	nil,                                    // 10: workflow.deploy.ApplicationDeploy.TagsEntry
	nil,                                    // 11: workflow.deploy.ApplicationConfig.EnvsEntry
	nil,                                    // 12: workflow.deploy.CreateApplicationDeployRequest.TagsEntry
	(*page.PageRequest)(nil),               // 13: page.PageRequest
}
var file_api_pkg_deploy_pb_deploy_proto_depIdxs = []int32{
	4,  // 0: workflow.deploy.ApplicationDeploy.application_conf:type_name -> workflow.deploy.ApplicationConfig
	0,  // 1: workflow.deploy.ApplicationDeploy.deploy_mode:type_name -> workflow.deploy.Mode
	3,  // 2: workflow.deploy.ApplicationDeploy.host_deploy_config:type_name -> workflow.deploy.HostModeConfig
	6,  // 3: workflow.deploy.ApplicationDeploy.k8s_deploy_config:type_name -> workflow.deploy.K8sModeConfig
	10, // 4: workflow.deploy.ApplicationDeploy.tags:type_name -> workflow.deploy.ApplicationDeploy.TagsEntry
	1,  // 5: workflow.deploy.ApplicationConfig.type:type_name -> workflow.deploy.AppConfigType
	5,  // 6: workflow.deploy.ApplicationConfig.files:type_name -> workflow.deploy.FileConfig
	11, // 7: workflow.deploy.ApplicationConfig.envs:type_name -> workflow.deploy.ApplicationConfig.EnvsEntry
	4,  // 8: workflow.deploy.CreateApplicationDeployRequest.application_conf:type_name -> workflow.deploy.ApplicationConfig
	0,  // 9: workflow.deploy.CreateApplicationDeployRequest.deploy_mode:type_name -> workflow.deploy.Mode
	3,  // 10: workflow.deploy.CreateApplicationDeployRequest.host_deploy_config:type_name -> workflow.deploy.HostModeConfig
	6,  // 11: workflow.deploy.CreateApplicationDeployRequest.k8s_deploy_config:type_name -> workflow.deploy.K8sModeConfig
	12, // 12: workflow.deploy.CreateApplicationDeployRequest.tags:type_name -> workflow.deploy.CreateApplicationDeployRequest.TagsEntry
	2,  // 13: workflow.deploy.ApplicationDeploySet.items:type_name -> workflow.deploy.ApplicationDeploy
	13, // 14: workflow.deploy.QueryApplicationDeployRequest.page:type_name -> page.PageRequest
	7,  // 15: workflow.deploy.Service.CreateApplicationDeploy:input_type -> workflow.deploy.CreateApplicationDeployRequest
	9,  // 16: workflow.deploy.Service.QueryApplicationDeploy:input_type -> workflow.deploy.QueryApplicationDeployRequest
	2,  // 17: workflow.deploy.Service.CreateApplicationDeploy:output_type -> workflow.deploy.ApplicationDeploy
	8,  // 18: workflow.deploy.Service.QueryApplicationDeploy:output_type -> workflow.deploy.ApplicationDeploySet
	17, // [17:19] is the sub-list for method output_type
	15, // [15:17] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_api_pkg_deploy_pb_deploy_proto_init() }
func file_api_pkg_deploy_pb_deploy_proto_init() {
	if File_api_pkg_deploy_pb_deploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDeploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostModeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SModeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApplicationDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDeploySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_pkg_deploy_pb_deploy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryApplicationDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_pkg_deploy_pb_deploy_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_pkg_deploy_pb_deploy_proto_goTypes,
		DependencyIndexes: file_api_pkg_deploy_pb_deploy_proto_depIdxs,
		EnumInfos:         file_api_pkg_deploy_pb_deploy_proto_enumTypes,
		MessageInfos:      file_api_pkg_deploy_pb_deploy_proto_msgTypes,
	}.Build()
	File_api_pkg_deploy_pb_deploy_proto = out.File
	file_api_pkg_deploy_pb_deploy_proto_rawDesc = nil
	file_api_pkg_deploy_pb_deploy_proto_goTypes = nil
	file_api_pkg_deploy_pb_deploy_proto_depIdxs = nil
}
