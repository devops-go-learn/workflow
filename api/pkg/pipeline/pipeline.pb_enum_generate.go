// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package pipeline

import (
	"bytes"
	"fmt"
	"strings"
)

// ParseSTEP_STATUSFromString Parse STEP_STATUS from string
func ParseSTEP_STATUSFromString(str string) (STEP_STATUS, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := STEP_STATUS_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown STEP_STATUS: %s", str)
	}

	return STEP_STATUS(v), nil
}

// Equal type compare
func (t STEP_STATUS) Equal(target STEP_STATUS) bool {
	return t == target
}

// IsIn todo
func (t STEP_STATUS) IsIn(targets ...STEP_STATUS) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t STEP_STATUS) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *STEP_STATUS) UnmarshalJSON(b []byte) error {
	ins, err := ParseSTEP_STATUSFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParsePIPELINE_STATUSFromString Parse PIPELINE_STATUS from string
func ParsePIPELINE_STATUSFromString(str string) (PIPELINE_STATUS, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := PIPELINE_STATUS_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown PIPELINE_STATUS: %s", str)
	}

	return PIPELINE_STATUS(v), nil
}

// Equal type compare
func (t PIPELINE_STATUS) Equal(target PIPELINE_STATUS) bool {
	return t == target
}

// IsIn todo
func (t PIPELINE_STATUS) IsIn(targets ...PIPELINE_STATUS) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t PIPELINE_STATUS) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *PIPELINE_STATUS) UnmarshalJSON(b []byte) error {
	ins, err := ParsePIPELINE_STATUSFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseRUNNER_TYPEFromString Parse RUNNER_TYPE from string
func ParseRUNNER_TYPEFromString(str string) (RUNNER_TYPE, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := RUNNER_TYPE_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown RUNNER_TYPE: %s", str)
	}

	return RUNNER_TYPE(v), nil
}

// Equal type compare
func (t RUNNER_TYPE) Equal(target RUNNER_TYPE) bool {
	return t == target
}

// IsIn todo
func (t RUNNER_TYPE) IsIn(targets ...RUNNER_TYPE) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t RUNNER_TYPE) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *RUNNER_TYPE) UnmarshalJSON(b []byte) error {
	ins, err := ParseRUNNER_TYPEFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
