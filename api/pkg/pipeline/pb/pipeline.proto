syntax = "proto3";

package workflow.pipeline;
option go_package = "github.com/infraboard/workflow/api/pkg/pipeline";

import "github.com/infraboard/mcube/cmd/protoc-gen-go-ext/extension/tag/tag.proto";
import "github.com/infraboard/mcube/pb/page/page.proto";
import "api/pkg/scm/pb/gitlab.proto";

service Service {
	rpc CreatePipeline(CreatePipelineRequest) returns(Pipeline);
	rpc QueryPipeline(QueryPipelineRequest) returns(PipelineSet);
	rpc DescribePipeline(DescribePipelineRequest) returns(Pipeline);
	rpc WatchPipeline(stream WatchPipelineRequest) returns(stream WatchPipelineResponse);
	rpc CreateStep(CreateStepRequest) returns(Step);
	rpc QueryStep(QueryStepRequest) returns(StepSet);
	rpc DescribeStep(DescribeStepRequest) returns(Step);
	rpc DeleteStep(DeleteStepRequest) returns(Step);
	rpc CancelStep(CancelStepRequest) returns(Step);
	rpc AuditStep(AuditStepRequest) returns(Step);
	rpc DeletePipeline(DeletePipelineRequest) returns(Pipeline);
}

// STEP_STATUS Step任务状态
enum STEP_STATUS {
    // 任务等待被执行
    PENDDING = 0;
	// 任务调度失败
	SCHEDULE_FAILED = 10;
	// 正在执行
	RUNNING = 1;
    // 执行成功
    SUCCEEDED = 3;
	// 执行失败
	FAILED = 4;
    // 取消中
    CANCELING = 5;
    // 取消完成
    CANCELED = 6;
	// 忽略执行
	SKIP = 7;
	// 审批中, 确认过后才能继续执行
	AUDITING = 8;
	// 审批拒绝
	REFUSE = 9;
}

// PIPELINE_STATUS 流水线状态
enum PIPELINE_STATUS {
    // 已经调度完成, 等待执行
    WAITTING = 0;
	// 执行中
	EXECUTING = 1;
	// 执行结束
	COMPLETE = 2;
}

// PARAM_VALUE_TYPE 参数值类型
enum PARAM_VALUE_TYPE {
	// 明文文本信息
	PLAIN = 0;
    // 应用变量
    APP_VAR = 1;
	// secret 引用
	SECRET_REF = 2;
	// 明文敏感信息, 需要后端加密
	PASSWORD = 3;
	// 密文信息, 由PASSWORD类型加密后得到
	CRYPTO = 4;
}

// AUDIT_RESPONSE 审核结果
enum AUDIT_RESPONSE {
	// 未处理
	UOD = 0;
	// 允许执行
	ALLOW = 1;
	// 不允许执行
	DENY = 2;
}

// STEP_CREATE_BY step任务类型
enum STEP_CREATE_BY {
	// 由pipeline控制器创建
	PIPELINE = 0;
	// 由cronjob控制器创建
	CRONJOB = 1;
	// 由用户自己创建, 用于单次任务执行，比如调试
	USER = 2;
}

enum PIPELINE_WATCH_MOD {
	// watch sigle pipeline 
	BY_ID = 0;
	// watch namespace pipeline
	BY_NAMESPACE = 1;
}

// Pipeline todo
message Pipeline {
    // 唯一ID
    string id = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"_id" json:"id"'}
        ];
	// 资源版本
	int64 resource_version = 2 [
        (google.protobuf.field_tag) = {struct_tag: 'bson:"resource_version" json:"resource_version,omitempty"'}
        ];
	// 所属域
	string domain = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"domain" json:"domain"'}
        ];
	// 所属空间
	string namespace = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"namespace" json:"namespace"'}
        ];
	// 创建时间
	int64 create_at = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_at" json:"create_at"'}
        ];
	// 创建人
	string create_by = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_by" json:"create_by"'}
        ];
	// 模版id
	string template_id = 16[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"template_id" json:"template_id"'}
		];
    // 名称
    string name = 7[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name"'}
        ];
	// 全局参数, step执行时合并处理
	map<string, string> with = 13[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"with" json:"with"'}
		];
	// 需要挂载的文件
	MountData mount = 14[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"mount" json:"mount"'}
		];
	// 标签
	map<string, string> tags = 8[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"tags" json:"tags"'}
        ];
	// 描述
	string description = 9[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"description" json:"description"'}
		];
	// 触发条件
	Trigger on = 10[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"on" json:"on"'}
		];
	// 触发事件
	workflow.pipeline.scm.WebHookEvent hook_event = 15[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"hook_event" json:"hook_event"'}
		];
	// 当前状态
	PipelineStatus status = 11[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status"'}
		];
	// 具体编排阶段
	repeated Stage stages = 12[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"stages" json:"stages"'}
		];
}

// Trigger Pipeline触发执行的条件
message Trigger {
	// 事件名称,那些事件可以触发
	repeated string events = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"events" json:"events"'}
		];
	// 分支名称, 那些分支可以触发
	repeated string branches = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"branches" json:"branches"'}
		];
}

// 挂载信息, 用于流水线执行过程中 数据共享
message MountData {
	// 挂载的根节点位置, 默认挂载点: workflow
	string root = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"root" json:"root"'}
		];
	// 需要挂载的文件列表
	repeated MountFile files = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"files" json:"files"'}
		];
}

message MountFile {
	// 文件名称, 默认就是下载文件的名称
	string name = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name"'}
		];
	// 文件下载地址
	string download_url = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"download_url" json:"download_url"'}
		];
	// 是否解压
	bool unpack = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"unpack" json:"unpack"'}
		];
	// 解压目录
	string unpack_dir = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"unpack_dir" json:"unpack_dir"'}
		];
}

// Stage todo
message Stage {
	// 阶段ID
	int32 id = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"id" json:"id"'}
        ];
    // 名称
    string name = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name" validate:"required"'}
        ];
	// 依赖其他stage执行成功
	repeated string needs = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"needs" json:"needs"'}
		];
	// 具体步骤
	repeated Step steps = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"steps" json:"steps"'}
		];
}

message CreateStepRequest {
    // 名称
    string name = 1[
        (google.protobuf.field_tag) = {struct_tag: 'json:"name" validate:"required"'}
        ];
	// 具体动作
	string action = 2[
        (google.protobuf.field_tag) = {struct_tag: 'json:"action" validate:"required"'}
        ];
	// 是否需要审批, 审批通过后才能执行
	bool with_audit =3[
        (google.protobuf.field_tag) = {struct_tag: 'json:"with_audit"'}
        ];
	// 审批参数, 有审批模块做具体实现
	map<string, string> audit_params = 4[
        (google.protobuf.field_tag) = {struct_tag: 'json:"audit_params"'}
        ];
	// 参数
	map<string, string> with = 5[
		(google.protobuf.field_tag) = {struct_tag: 'json:"with"'}
		];	
	// step执行完成后, 是否需要通知
	bool with_notify = 6[
        (google.protobuf.field_tag) = {struct_tag: 'json:"with_notify"'}
        ];
	// 通知参数, 由通知模块做具体实现
	map<string, string> notify_params = 7[
        (google.protobuf.field_tag) = {struct_tag: 'json:"notify_params"'}
        ];
	// WebHook配置, 用于和其他系统联动, 比如各种机器人
	repeated WebHook webhooks = 8[
        (google.protobuf.field_tag) = {struct_tag: 'json:"webhooks"'}
        ];
	// 调度标签
	map<string, string> node_selector = 9[
        (google.protobuf.field_tag) = {struct_tag: 'json:"node_selector"'}
        ];
	// 空间
	string namespace = 10[
        (google.protobuf.field_tag) = {struct_tag: 'json:"namespace"'}
        ];
}

message Step {
	// Key 运行时标识符
	string key = 9 [
        (google.protobuf.field_tag) = {struct_tag: 'bson:"key" json:"key,omitempty"'}
        ];
	// step由那种控制器创建的, 也就是step类型
	STEP_CREATE_BY create_type = 16[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_type" json:"create_type"'}
        ];
	// 所属空间
	string namespace = 17[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"namespace" json:"namespace"'}
        ];
	// 所属空间
	string pipeline_id = 18[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"pipeline_id" json:"pipeline_id,omitempty"'}
        ];
	// 创建时间
	int64 create_at = 19[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_at" json:"create_at"'}
        ];
	// 状态更新时间
	int64 update_at = 20[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"update_at" json:"update_at"'}
        ];
	// 关联的应用部署id, 关联部署过后可以通过变量传递当前部署的配置
	string deploy_id = 21[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"deploy_id" json:"deploy_id"'}
        ];
	// 资源版本
	int64 resource_version = 14[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"resource_version" json:"resource_version,omitempty"'}
        ];
	// 步骤ID
	int32 id = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"id" json:"id"'}
        ];
    // 名称
    string name = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name" validate:"required"'}
        ];
	// 具体动作
	string action = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"action" json:"action" validate:"required"'}
        ];
	// 参数
	map<string, string> with = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"with" json:"with"'}
		];
	// 是否并行
	bool is_parallel = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"is_parallel" json:"is_parallel"'}
        ];
	// 忽略失败
	bool ignore_failed = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"ignore_failed" json:"ignore_failed"'}
        ];
	// 是否需要审批, 审批通过后才能执行
	bool with_audit =10[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"with_audit" json:"with_audit"'}
        ];
	// 审批参数, 有审批模块做具体实现
	map<string, string> audit_params = 13[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"audit_params" json:"audit_params"'}
        ];
	// step执行完成后, 是否需要通知
	bool with_notify = 11[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"with_notify" json:"with_notify"'}
        ];
	// 通知参数, 由通知模块做具体实现
	map<string, string> notify_params = 12[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"notify_params" json:"notify_params"'}
        ];
	// WebHook配置, 用于和其他系统联动, 比如各种机器人
	repeated WebHook webhooks = 15[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"webhooks" json:"webhooks"'}
        ];
	// 调度标签
	map<string, string> node_selector = 8[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"node_selector" json:"node_selector"'}
        ];
	// 当前步骤的状态
	StepStatus status = 7[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status,omitempty"'}
        ];
}

message WebHook {
	// POST URL
	string url = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"url" json:"url" validate:"required,url"'}
		];
	// 需要自定义添加的头, 用于身份认证
	map<string, string> header = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"header" json:"header"'}
        ];
	// 那些状态下触发
	repeated STEP_STATUS events = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"events" json:"events"'}
        ];
	// 简单的描述信息
	string description = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"description" json:"description"'}
		];
	// 推送结果
	WebHookStatus status = 5[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status"'}
		];
}

message WebHookStatus {
	// 开始时间
	int64 start_at = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"start_at" json:"start_at"'}
		];
	// 耗时多久，单位毫秒
	int64 cost = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"cost" json:"cost"'}
		];
	// 是否推送成功
	bool success = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"success" json:"success"'}
		];
	// 异常时的错误信息
	string message = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"message" json:"message"'}
		];
}

message StepStatus {
	// 当前该step的flow编号
	int64 flow_number = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"flow_number" json:"flow_number"'}
		];
	// 开始时间
	int64 start_at = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"start_at" json:"start_at"'}
		];
	// 结束时间
	int64 end_at = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"end_at" json:"end_at"'}
		];
	// 当前状态
	STEP_STATUS status = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status"'}
        ];
	// 被调度到的节点
	string scheduled_node = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"scheduled_node" json:"scheduled_node"'}
        ];
	// 审批时间
	int64 audit_at = 9[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"audit_at" json:"audit_at"'}
        ];
	// 审批结果
	AUDIT_RESPONSE audit_response = 12[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"audit_response" json:"audit_response"'}
        ];
	// 审批时的反馈信息
	string audit_message = 8[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"audit_message" json:"audit_message"'}
        ];
	// 通知发送时间
	int64 notify_at = 10[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"notify_at" json:"notify_at"'}
        ];
	// 通知失败信息, 如果没有表示成功
	string notify_error = 11[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"notify_error" json:"notify_error"'}
        ];
    // 执行结果
    string message = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"message" json:"message"'}
        ];
	// 执行完后的一些额外数据, 都以URL的方式返回
	map<string, string> response = 7[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"response" json:"response"'}
        ];
	// 执行过程中的一些上下文信息
	map<string, string> context_map = 14[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"context_map" json:"context_map,omitempty"'}
        ];	
}

// StepSet todo
message StepSet {
    int64 total = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"total" json:"total"'}
        ];
    repeated Step items = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"items" json:"items"'}
        ];
}

// QueryStepRequest 查询Book请求
message QueryStepRequest {
    page.PageRequest page = 1;
    string key = 2;
}

// DescribeStepRequest todo
message DescribeStepRequest {
	// 唯一ID
	string key = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"key"'}
		];
	// 唯一name
	string namespace = 2[
		(google.protobuf.field_tag) = {struct_tag: 'json:"namespace"'}
		];	
}


// PipelineStatus 当前状态
message PipelineStatus {
	// 当前正在执行step的flow number
	int64 current_flow = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"current_flow" json:"current_flow"'}
		];
	// 开始时间
	int64 start_at = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"start_at" json:"start_at"'}
		];
	// 结束时间
	int64 end_at = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"end_at" json:"end_at"'}
		];
	// 当前状态
	PIPELINE_STATUS status = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status"'}
        ];
	// 由哪个调度器实例负责进行调度运行
	string scheduler_node = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"scheduler_node" json:"scheduler_node"'}
        ];
    // 执行结果
    string message = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"message" json:"message"'}
        ];
}

// PipelineSet todo
message PipelineSet {
    int64 total = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"total" json:"total"'}
        ];
    repeated Pipeline items = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"items" json:"items"'}
        ];
}

// CreatePipelineRequest 创建Book请求
message CreatePipelineRequest {
	// 模版id
	string template_id = 8[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"template_id" json:"template_id"'}
		];
	// 触发事件
	workflow.pipeline.scm.WebHookEvent hook_event = 9[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"hook_event" json:"hook_event"'}
		];
	// 所属域
	string domain = 10[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"domain" json:"domain" validate:"required"'}
        ];
	// 所属空间
	string namespace = 11[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"namespace" json:"namespace" validate:"required"'}
        ];
	// 创建人
	string create_by = 12[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_by" json:"create_by" validate:"required"'}
        ];
    // 名称
    string name = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name" validate:"required"'}
        ];
	// 全局参数, Step执行时合并处理
	map<string, string> with = 6[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"with" json:"with"'}
		];
	// 挂载文件
	MountData mount = 7[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"mount" json:"mount"'}
		];
	// 标签
	map<string, string> tags = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"tags" json:"tags"'}
        ];
	// 描述
	string description = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"description" json:"description"'}
		];
	// 触发条件
	Trigger on = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"on" json:"on"'}
		];
	// 具体编排阶段
	repeated Stage stages = 5[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"stages" json:"stages"'}
		];
}

// QueryPipelineRequest 查询Book请求
message QueryPipelineRequest {
    page.PageRequest page = 1;
    string name = 2;
}

message DeletePipelineRequest {
	// 唯一ID
	string id = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"id"'}
		];
}

message DescribePipelineRequest {
	// 唯一ID
	string id = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"id"'}
		];
	// 唯一name
	string namespace = 2[
		(google.protobuf.field_tag) = {struct_tag: 'json:"namespace"'}
		];
}

message DeleteStepRequest {
	// 唯一ID
	string key = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"key" validate:"required"'}
		];
}


message CancelStepRequest {
	// 取消step对应的key
	string key = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"id"'}
		];
}

message AuditStepRequest {
	// 取消step对应的key
	string key = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"key"'}
		];
	// 审核的结果
	AUDIT_RESPONSE audit_reponse = 2[
		(google.protobuf.field_tag) = {struct_tag: 'json:"audit_reponse"'}
		];
	// 审批时的反馈信息
	string audit_message = 3[
        (google.protobuf.field_tag) = {struct_tag: 'json:"audit_message"'}
        ];
}

message WatchPipelineRequest {
	oneof request_union {
	  CreateWatchPipelineRequest create_request = 1;
	  CancelWatchPipelineRequest cancel_request = 2;
	}
  }

message CreateWatchPipelineRequest {
	PIPELINE_WATCH_MOD mod = 1 [
		(google.protobuf.field_tag) = {struct_tag: 'json:"mod"'}
		];
	// 需要watch的pipeline id
	string id = 2[
		(google.protobuf.field_tag) = {struct_tag: 'json:"id"'}
		];
	// watch整个namespace piplein 状态变化, 用于做namespace实时状态大屏
	string namespace = 3[
		(google.protobuf.field_tag) = {struct_tag: 'json:"namespace"'}
		];
	// 并不执行真正的watch, 尝试运行, 主要用于链接前的检查工作
	bool dry_run = 4[
		(google.protobuf.field_tag) = {struct_tag: 'json:"dry_run"'}
		];
}

message CancelWatchPipelineRequest {
	int64 watch_id = 2[
		(google.protobuf.field_tag) = {struct_tag: 'json:"watch_id"'}
		];
}

message WatchPipelineResponse {
	int64 watch_id = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"watch_id"'}
		];	
	Pipeline pipeline = 2[
		(google.protobuf.field_tag) = {struct_tag: 'json:"pipeline"'}
		];	
}