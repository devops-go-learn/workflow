syntax = "proto3";

package workflow.pipeline;
option go_package = "github.com/infraboard/workflow/api/pkg/pipeline";

import "github.com/infraboard/mcube/cmd/protoc-gen-go-ext/extension/tag/tag.proto";
import "github.com/infraboard/mcube/pb/page/page.proto";
import "github.com/infraboard/mcube/pb/resource/base.proto";


// STEP_STATUS Step任务状态
enum STEP_STATUS {
    // 任务等待被调度
    PENDDING = 0;
	// 正在执行
	RUNNING = 1;
    // 执行成功
    SUCCEEDED = 3;
	// 执行失败
	FAILED = 4;
    // 取消中
    CANCELING = 5;
    // 任务取消
    CANCELED = 6;
	// 忽略执行
	SKIP = 7;
}

// PIPELINE_STATUS 流水线状态
enum PIPELINE_STATUS {
    // 已经调度完成, 等待执行
    WAITTING = 0;
	// 执行中
	EXECUTING = 1;
	// 执行结束
	COMPLETE = 2;
}

// STEP_RUNNER step执行类型
enum RUNNER_TYPE {
	// 使用Node节点本地安装的Docker执行
	DOCKER = 0;
	// 使用K8s执行
	K8s = 1;
	// 本地执行, 用于在Node节点本地执行
	LOCAL = 2;
}

service Service {
	rpc CreatePipeline(CreatePipelineRequest) returns(Pipeline);
	rpc QueryPipeline(QueryPipelineRequest) returns(PipelineSet);
	rpc DescribePipeline(DescribePipelineRequest) returns(Pipeline);
	rpc QueryStep(QueryStepRequest) returns(StepSet);
	rpc DescribeStep(DescribeStepRequest) returns(Step);
	rpc DeletePipeline(DeletePipelineRequest) returns(Pipeline);
	rpc CreateAction(CreateActionRequest) returns(Action);
	rpc QueryAction(QueryActionRequest) returns(ActionSet);
	rpc DescribeAction(DescribeActionRequest) returns(Action);
	rpc DeleteAction(DeleteActionRequest) returns(Action);

}

// Pipeline todo
message Pipeline {
    // 唯一ID
    string id = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"_id" json:"id"'}
        ];
	// 资源版本
	int64 resource_version = 2 [
        (google.protobuf.field_tag) = {struct_tag: 'bson:"resource_version" json:"resource_version,omitempty"'}
        ];
	// 所属域
	string domain = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"domain" json:"domain"'}
        ];
	// 所属空间
	string namespace = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"namespace" json:"namespace"'}
        ];
	// 创建时间
	int64 create_at = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_at" json:"create_at"'}
        ];
	// 创建人
	string create_by = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_by" json:"create_by"'}
        ];
    // 名称
    string name = 7[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name"'}
        ];
	// 全局参数, step执行时合并处理
	map<string, string> with = 13[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"with" json:"with"'}
		];
	// 需要挂载的文件
	MountData mount = 14[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"mount" json:"mount"'}
		];
	// 标签
	map<string, string> tags = 8[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"tags" json:"tags"'}
        ];
	// 描述
	string description = 9[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"description" json:"description"'}
		];
	// 触发条件
	Trigger on = 10[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"on" json:"on"'}
		];
	// 当前状态
	PipelineStatus status = 11[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status"'}
		];
	// 具体编排阶段
	repeated Stage stages = 12[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"stages" json:"stages"'}
		];
}

// 挂载信息, 用于流水线执行过程中 数据共享
message MountData {
	// 挂载的根节点位置, 默认挂载点: workflow
	string root = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"root" json:"root"'}
		];
	// 需要挂载的文件列表
	repeated MountFile files = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"files" json:"files"'}
		];
}

message MountFile {
	// 文件名称, 默认就是下载文件的名称
	string name = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name"'}
		];
	// 文件下载地址
	string download_url = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"download_url" json:"download_url"'}
		];
	// 是否解压
	bool unpack = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"unpack" json:"unpack"'}
		];
	// 解压目录
	string unpack_dir = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"unpack_dir" json:"unpack_dir"'}
		];
}

// Trigger Pipeline触发执行的条件
message Trigger {
	// 是否允许手动触发
	bool allow_manual = 1[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"allow_manual" json:"allow_manual"'}
		];
	// 是否启用自动触发
	bool auto_enabled = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"enabled" json:"enabled"'}
		];
	// 事件名称
	string event_name = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"event_name" json:"event_name"'}
		];
	// 具体分支
	repeated string branches = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"branches" json:"branches"'}
		];
}

// Stage todo
message Stage {
	// 阶段ID
	int32 id = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"id" json:"id"'}
        ];
    // 名称
    string name = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name" validate:"required"'}
        ];
	// 依赖其他stage执行成功
	repeated string needs = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"needs" json:"needs"'}
		];
	// 具体步骤
	repeated Step steps = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"steps" json:"steps"'}
		];
}

message Step {
	// Key 运行时标识符
	string key = 9 [
        (google.protobuf.field_tag) = {struct_tag: 'bson:"key" json:"key,omitempty"'}
        ];
	// 步骤ID
	int32 id = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"id" json:"id"'}
        ];
    // 名称
    string name = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name" validate:"required"'}
        ];
	// 具体动作
	string action = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"action" json:"action" validate:"required"'}
        ];
	// 参数
	map<string, string> with = 4[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"with" json:"with"'}
		];
	// 是否并行
	bool is_parallel = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"is_parallel" json:"is_parallel"'}
        ];
	// 忽略失败
	bool ignore_failed = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"ignore_failed" json:"ignore_failed"'}
        ];
	// 调度标签
	map<string, string> node_selector = 8[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"node_selector" json:"node_selector"'}
        ];
	// 当前步骤的状态
	StepStatus status = 7[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status,omitempty"'}
        ];
}

message StepStatus {
	// 开始时间
	int64 start_at = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"start_at" json:"start_at"'}
		];
	// 结束时间
	int64 end_at = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"end_at" json:"end_at"'}
		];
	// 当前状态
	STEP_STATUS status = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status"'}
        ];
	// 被调度到的节点
	string scheduled_node = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"scheduled_node" json:"scheduled_node"'}
        ];
    // 执行结果
    string message = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"message" json:"message"'}
        ];
	// 执行完后的一些额外数据, 都以URL的方式返回
	map<string, string> response = 7[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"response" json:"response"'}
        ];
}

// StepSet todo
message StepSet {
    int64 total = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"total" json:"total"'}
        ];
    repeated Step items = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"items" json:"items"'}
        ];
}

// QueryStepRequest 查询Book请求
message QueryStepRequest {
    page.PageRequest page = 1;
    string key = 2;
}

// DescribeStepRequest todo
message DescribeStepRequest {
	// 唯一ID
	string key = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"key"'}
		];	
}


// PipelineStatus 当前状态
message PipelineStatus {
	// 开始时间
	int64 start_at = 2[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"start_at" json:"start_at"'}
		];
	// 结束时间
	int64 end_at = 3[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"end_at" json:"end_at"'}
		];
	// 当前状态
	PIPELINE_STATUS status = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"status" json:"status"'}
        ];
	// 由哪个调度器实例负责进行调度运行
	string scheduler_node = 5[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"scheduler_node" json:"scheduler_node"'}
        ];
    // 执行结果
    string message = 6[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"message" json:"message"'}
        ];
}

// PipelineSet todo
message PipelineSet {
    int64 total = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"total" json:"total"'}
        ];
    repeated Pipeline items = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"items" json:"items"'}
        ];
}

// CreatePipelineRequest 创建Book请求
message CreatePipelineRequest {
    // 名称
    string name = 1[
        (google.protobuf.field_tag) = {struct_tag: 'json:"name" validate:"required"'}
        ];
	// 全局参数, Step执行时合并处理
	map<string, string> with = 6[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"with" json:"with"'}
		];
	// 挂载文件
	MountData mount = 7[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"mount" json:"mount"'}
		];
	// 标签
	map<string, string> tags = 2[
        (google.protobuf.field_tag) = {struct_tag: 'json:"tags"'}
        ];
	// 描述
	string description = 3[
		(google.protobuf.field_tag) = {struct_tag: 'json:"description"'}
		];
	// 触发条件
	Trigger on = 4[
		(google.protobuf.field_tag) = {struct_tag: 'json:"on"'}
		];
	// 具体编排阶段
	repeated Stage stages = 5[
		(google.protobuf.field_tag) = {struct_tag: 'json:"stages"'}
		];
}

// QueryPipelineRequest 查询Book请求
message QueryPipelineRequest {
    page.PageRequest page = 1;
    string name = 2;
}

// Action 动作定义
message Action {
    // 名称
    string name = 8[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"name" json:"name" validate:"required"'}
        ];
	// 资源版本
	int64 resource_version = 16 [
        (google.protobuf.field_tag) = {struct_tag: 'bson:"resource_version" json:"resource_version,omitempty"'}
        ];
	// 所属域
	string domain = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"domain" json:"domain"'}
        ];
	// 所属空间
	string namespace = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"namespace" json:"namespace"'}
        ];
	// 创建时间
	int64 create_at = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_at" json:"create_at"'}
        ];
	// 创建人
	string create_by = 4[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"create_by" json:"create_by"'}
        ];
	// 更新时间
	int64 update_at = 5[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"update_at" json:"update_at"'}
		];
	// 更新人
	string update_by = 6[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"update_by" json:"update_by"'}
		];
	// 可见模式
	mcube.resource.VisiableMode visiable_mode = 15[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"visiable_mode" json:"visiable_mode"'}
		];
	// 执行器类型, 默认采用Node节点本地Docker执行
	RUNNER_TYPE runner_type = 13[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"runner_type" json:"runner_type"'}
        ];
	// runner运行时参数
	map<string, string> runner_params = 17[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"runner_params" json:"runner_params"'}
        ];
	// step运行时的参数说明
	map<string, ParamValueDesc> run_params = 14[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"run_params" json:"run_params"'}
        ];
	// 标签
	map<string, string> tags = 11[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"tags" json:"tags"'}
        ];
	// 描述
	string description = 12[
		(google.protobuf.field_tag) = {struct_tag: 'bson:"description" json:"description"'}
		];	
}

message ParamValueDesc {
	// 可选/必传
	bool required = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"required" json:"required"'}
        ];
	// 默认值, action运行时如果未传人，会填充默认值
	string default = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"default" json:"default"'}
        ];
	// 值描述
	string describe = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"describe" json:"describe"'}
        ];
}

// ActionSet todo
message ActionSet {
    int64 total = 1[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"total" json:"total"'}
        ];
    repeated Action items = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"items" json:"items"'}
        ];
}

message CreateActionRequest {
	// 执行器类型, 默认采用Node节点本地Docker执行
	RUNNER_TYPE runner_type = 7[
        (google.protobuf.field_tag) = {struct_tag: 'json:"runner_type"'}
        ];
	// 名称
	string name = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"name" validate:"required"'}
		];
	// 可见模式
	mcube.resource.VisiableMode visiable_mode = 6[
		(google.protobuf.field_tag) = {struct_tag: 'json:"visiable_mode"'}
		];
	// runner运行时参数
	map<string, string> runner_params = 2[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"runner_params" json:"runner_params"'}
        ];
	// 运行时的参数说明
	map<string, ParamValueDesc> run_params = 3[
        (google.protobuf.field_tag) = {struct_tag: 'bson:"run_params" json:"run_params"'}
        ];
	// 标签
	map<string, string> tags = 4[
		(google.protobuf.field_tag) = {struct_tag: 'json:"tags"'}
		];
	// 描述
	string description = 5[
		(google.protobuf.field_tag) = {struct_tag: 'json:"description"'}
		];	
}

message DescribeActionRequest {
	// 唯一name
	string name = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"name"'}
		];	
}

message DeleteActionRequest {
	// 唯一name
	string name = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"name"'}
		];
	// 可见模式
	mcube.resource.VisiableMode visiable_mode = 2[
		(google.protobuf.field_tag) = {struct_tag: 'json:"visiable_mode"'}
		];
}

// QueryPipelineRequest 查询Book请求
message QueryActionRequest {
    page.PageRequest page = 1;
    string name = 2;
}

message DeletePipelineRequest {
	// 唯一ID
	string id = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"id"'}
		];
}

message DescribePipelineRequest {
	// 唯一ID
	string id = 1[
		(google.protobuf.field_tag) = {struct_tag: 'json:"id"'}
		];	
}

