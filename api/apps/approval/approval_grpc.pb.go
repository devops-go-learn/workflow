// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/apps/approval/pb/approval.proto

package approval

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	QueryApproval(ctx context.Context, in *QueryApprovalRequest, opts ...grpc.CallOption) (*ApprovalSet, error)
	DescribeApproval(ctx context.Context, in *DescribeApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	UpdateApproval(ctx context.Context, in *UpdateApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
	DeleteApproval(ctx context.Context, in *DeleteApprovalRequest, opts ...grpc.CallOption) (*Approval, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateApproval(ctx context.Context, in *CreateApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	out := new(Approval)
	err := c.cc.Invoke(ctx, "/infraboard.workorder.approval.Service/CreateApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) QueryApproval(ctx context.Context, in *QueryApprovalRequest, opts ...grpc.CallOption) (*ApprovalSet, error) {
	out := new(ApprovalSet)
	err := c.cc.Invoke(ctx, "/infraboard.workorder.approval.Service/QueryApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DescribeApproval(ctx context.Context, in *DescribeApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	out := new(Approval)
	err := c.cc.Invoke(ctx, "/infraboard.workorder.approval.Service/DescribeApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateApproval(ctx context.Context, in *UpdateApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	out := new(Approval)
	err := c.cc.Invoke(ctx, "/infraboard.workorder.approval.Service/UpdateApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteApproval(ctx context.Context, in *DeleteApprovalRequest, opts ...grpc.CallOption) (*Approval, error) {
	out := new(Approval)
	err := c.cc.Invoke(ctx, "/infraboard.workorder.approval.Service/DeleteApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	CreateApproval(context.Context, *CreateApprovalRequest) (*Approval, error)
	QueryApproval(context.Context, *QueryApprovalRequest) (*ApprovalSet, error)
	DescribeApproval(context.Context, *DescribeApprovalRequest) (*Approval, error)
	UpdateApproval(context.Context, *UpdateApprovalRequest) (*Approval, error)
	DeleteApproval(context.Context, *DeleteApprovalRequest) (*Approval, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreateApproval(context.Context, *CreateApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApproval not implemented")
}
func (UnimplementedServiceServer) QueryApproval(context.Context, *QueryApprovalRequest) (*ApprovalSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryApproval not implemented")
}
func (UnimplementedServiceServer) DescribeApproval(context.Context, *DescribeApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeApproval not implemented")
}
func (UnimplementedServiceServer) UpdateApproval(context.Context, *UpdateApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApproval not implemented")
}
func (UnimplementedServiceServer) DeleteApproval(context.Context, *DeleteApprovalRequest) (*Approval, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApproval not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.workorder.approval.Service/CreateApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateApproval(ctx, req.(*CreateApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_QueryApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).QueryApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.workorder.approval.Service/QueryApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).QueryApproval(ctx, req.(*QueryApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DescribeApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DescribeApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.workorder.approval.Service/DescribeApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DescribeApproval(ctx, req.(*DescribeApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.workorder.approval.Service/UpdateApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateApproval(ctx, req.(*UpdateApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.workorder.approval.Service/DeleteApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteApproval(ctx, req.(*DeleteApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.workorder.approval.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApproval",
			Handler:    _Service_CreateApproval_Handler,
		},
		{
			MethodName: "QueryApproval",
			Handler:    _Service_QueryApproval_Handler,
		},
		{
			MethodName: "DescribeApproval",
			Handler:    _Service_DescribeApproval_Handler,
		},
		{
			MethodName: "UpdateApproval",
			Handler:    _Service_UpdateApproval_Handler,
		},
		{
			MethodName: "DeleteApproval",
			Handler:    _Service_DeleteApproval_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/apps/approval/pb/approval.proto",
}
